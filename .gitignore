<?php  
namespace core;

interface EquationInterface {
/**
* @param float $a
* @param float $b
* @param float $c
 *
 * @return array
 */
   public function solve($a, $b, $c);
}

?>

<?php
namespace core;
abstract class LogAbstract {
   protected static $i;

   private function __construct() {
   }

   /**
    * @return static
    */
   public static function Instance() {
      if (!(static::$i instanceof static)) {
         static::$i = new static();
      }
      return static::$i;
   }

   protected $log = array();

   abstract public function _write();
}
?>

<?php
namespace core;
interface LogInterface {
   public static function log($str);
   public static function write();
}
?>
